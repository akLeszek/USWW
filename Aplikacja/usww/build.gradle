plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.4'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'com.github.node-gradle.node' version '7.1.0'
    id 'jacoco'
    id 'war'
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
    google()
}

war {
    archiveFileName = 'usww.war'
    enabled = true
}

dependencyManagement {
    imports {
        mavenBom 'com.google.cloud:spring-cloud-gcp-dependencies:5.11.3'
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    implementation 'com.google.cloud:spring-cloud-gcp-starter'
    implementation 'com.google.cloud.sql:cloud-sql-connector-jdbc-sqlserver:1.24.1'

    implementation 'com.microsoft.sqlserver:mssql-jdbc'

    implementation 'org.projectlombok:lombok'
    implementation 'org.apache.commons:commons-lang3'
    implementation 'org.bouncycastle:bcprov-jdk15on:1.70'

    implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'

    annotationProcessor 'org.projectlombok:lombok'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testImplementation 'org.junit.jupiter:junit-jupiter-params'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    testImplementation 'com.h2database:h2'
    testImplementation 'org.mockito:mockito-core'
    testImplementation 'org.mockito:mockito-junit-jupiter'
    testImplementation 'org.assertj:assertj-core'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:mssqlserver'
}

tasks.named('test') {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        showExceptions true
        exceptionFormat "full"
        showCauses true
        showStackTraces true
        showStandardStreams = true // Zmienione na true dla lepszego debugowania
    }

    failFast = false

    finalizedBy jacocoTestReport
}

tasks.register('fastTest') {
    group = 'verification'
    description = 'Runs tests quickly without building Angular frontend'

    finalizedBy test
}

jacoco {
    toolVersion = "0.8.9"
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.7 // 70% pokrycia
            }
        }
    }
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
        html.outputLocation = layout.buildDirectory.dir('reports/jacoco')
    }
}

node {
    version = '22.0.0'
    download = true
    workDir = layout.buildDirectory.dir('nodejs').get().asFile
    npmWorkDir = layout.buildDirectory.dir('npm').get().asFile
}

tasks.register('buildAngular', NpmTask) {
    dependsOn npmInstall
    workingDir = file("${projectDir}/frontend")
    args = ['run', 'build']
}

tasks.register('copyAngularToStatic', Copy) {
    dependsOn buildAngular
    from "${projectDir}/frontend/dist/frontend/browser"
    into layout.buildDirectory.dir('resources/main/static').get().asFile
}

tasks.named('processResources') {
    dependsOn copyAngularToStatic
}
